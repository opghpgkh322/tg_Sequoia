from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import BufferedInputFile, InputMediaPhoto
import logging
from aiogram import Router
from aiogram.filters import BaseFilter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = "7617868509:AAFf1Bfj6M872KnDMrrMHm6q5PzyYNjpsgs"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ALLOWED_USERS = {
    "@vaditmn",
    "@olikburlakova",
    "@astratov_roman",
    "@loreley1264",
    "@DashaRyzhova",
    "@veron144ka"
}

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserAccessFilter(BaseFilter):
    async def __call__(self, message: types.Message) -> bool:
        return message.from_user.username in ALLOWED_USERS

class Form(StatesGroup):
    waiting_for_instructor = State()
    waiting_for_park = State()
    waiting_for_print = State()
    waiting_for_document = State()
    waiting_for_month = State()
    in_section = State()

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def build_keyboard(buttons: list, row_width: int = 2):
    builder = ReplyKeyboardBuilder()
    for button in buttons:
        builder.add(KeyboardButton(text=button))
    builder.adjust(row_width)
    return builder.as_markup(resize_keyboard=True)

def get_main_menu():
    return build_keyboard([
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–û–±—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤",
        "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–µ—Å—è—Ü", "–ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—é",
        "–î–æ–∫—É–º–µ–Ω—Ç—ã"
    ], 2)

def get_instructions_menu():
    return build_keyboard([
        "–ö–∞–∫ –∏–º–µ–Ω–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", "–ì—Ä–∞—Ñ–∏–∫ –∏ –∑–ø —Ç–∞–±–µ–ª—å",
        "–ò–Ω—Å–ø–µ–∫—Ü–∏—è –ò–°–°", "–û–±—Ö–æ–¥ —Ç—Ä–∞—Å—Å",
        "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è", "–û—Ç—á–µ—Ç –ø–æ –Ω–∞–ª–∏—á–Ω—ã–º",
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é"
    ], 2)

def get_instructors_menu():
    return build_keyboard([
        "–ß–µ–∫-–ª–∏—Å—Ç —Å—Ç–∞–∂—ë—Ä–∞", "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é"
    ], 2)

def get_parks_menu():
    return build_keyboard(["–ö–æ—à–∫–∏–Ω–æ", "–£–∫—Ç—É—Å", "–î—É–±—Ä–∞–≤–∞", "–ù–∏–∂–Ω–∏–π", "–¢—é–º–µ–Ω—å", "–ù–∞–∑–∞–¥"], 2)

def get_print_menu():
    return build_keyboard([
        "–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –∫–≤–µ—Å—Ç–æ–≤", "–ö–∞—Ä—Ç–∞ –ø–∞—Ä–∫–∞",
        "–¢–∞–±–ª–∏—á–∫–∏ –Ω–∞ –¥–µ—Ä–µ–≤—å—è", "–ö–∞—Å—Å–æ–≤—ã–π –¥–æ–º–∏–∫",
        "–û—Å—Ç–∞–ª—å–Ω–∞—è –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é"
    ], 2)

def get_document_menu():
    return build_keyboard([
        "–ë–ª–∞–Ω–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞", "–£–≥–æ–ª–æ–∫ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
        "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫", "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é"
    ], 2)

def get_schedule_menu():
    return build_keyboard([
        "–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞",
        "–ê–ª–≥–æ—Ä–∏—Ç–º",
        "–ö–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º"
    ], 2)

def get_inspection_menu():
    return build_keyboard([
        "–ê–ª–≥–æ—Ä–∏—Ç–º",
        "–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å–æ —Å–ø–∏—Å–∞–Ω–Ω—ã–º —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ–º",
        "–ö–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º"
    ], 2)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
@dp.message(Command("start"), UserAccessFilter())
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())

@dp.message(lambda message: message.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", UserAccessFilter())
async def select_instructions(message: types.Message, state: FSMContext):
    await state.set_state(Form.waiting_for_instructor)
    await message.answer("üìã –í—ã–±–µ—Ä–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:", reply_markup=get_instructions_menu())

@dp.message(lambda message: message.text == "–û–±—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤", UserAccessFilter())
async def select_instructors(message: types.Message, state: FSMContext):
    await state.set_state(Form.waiting_for_instructor)
    await message.answer("üë®‚Äçüè´ –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –æ–±—É—á–µ–Ω–∏—è:", reply_markup=get_instructors_menu())

@dp.message(lambda message: message.text == "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–µ—Å—è—Ü", UserAccessFilter())
async def select_month_park(message: types.Message, state: FSMContext):
    await state.set_state(Form.waiting_for_park)
    await state.update_data(section="–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–µ—Å—è—Ü")
    await message.answer("üìÖ –í—ã–±–µ—Ä–∏ –ø–∞—Ä–∫:", reply_markup=get_parks_menu())

@dp.message(lambda message: message.text == "–ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—é", UserAccessFilter())
async def select_print_park(message: types.Message, state: FSMContext):
    await state.set_state(Form.waiting_for_park)
    await state.update_data(section="–ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—é")
    await message.answer("üñ® –í—ã–±–µ—Ä–∏ –ø–∞—Ä–∫:", reply_markup=get_parks_menu())

@dp.message(lambda message: message.text == "–î–æ–∫—É–º–µ–Ω—Ç—ã", UserAccessFilter())
async def select_document_park(message: types.Message, state: FSMContext):
    await state.set_state(Form.waiting_for_park)
    await state.update_data(section="–î–æ–∫—É–º–µ–Ω—Ç—ã")
    await message.answer("üìÇ –í—ã–±–µ—Ä–∏ –ø–∞—Ä–∫:", reply_markup=get_parks_menu())

@dp.message(Form.waiting_for_instructor, UserAccessFilter())
async def process_instructions(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é":
        await state.clear()
        await cmd_start(message, state)
        return

    if message.text == "–ì—Ä–∞—Ñ–∏–∫ –∏ –∑–ø —Ç–∞–±–µ–ª—å":
        await state.set_state(Form.in_section)
        await state.update_data(current_section=message.text)
        await message.answer("üìÖ –ì—Ä–∞—Ñ–∏–∫ –∏ –∑–ø —Ç–∞–±–µ–ª—å:", reply_markup=get_schedule_menu())
        return

    if message.text == "–ò–Ω—Å–ø–µ–∫—Ü–∏—è –ò–°–°":
        await state.set_state(Form.in_section)
        await state.update_data(current_section=message.text)
        await message.answer("üîç –ò–Ω—Å–ø–µ–∫—Ü–∏—è –ò–°–°:", reply_markup=get_inspection_menu())
        return

    await state.set_state(Form.in_section)
    await state.update_data(current_section=message.text)
    if message.text == "–ß–µ–∫-–ª–∏—Å—Ç —Å—Ç–∞–∂—ë—Ä–∞":
        await message.answer(f"üë®‚Äçüè´ –ß–µ–∫-–ª–∏—Å—Ç —Å—Ç–∞–∂—ë—Ä–∞ - –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞", reply_markup=get_main_menu())
    else:
        await message.answer(f"üìã {message.text} - –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞", reply_markup=get_instructions_menu())

@dp.message(Form.waiting_for_park, UserAccessFilter())
async def process_park(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.clear()
        await cmd_start(message, state)
        return

    data = await state.get_data()
    park = message.text
    section = data.get("section")

    await state.set_state(Form.in_section)
    await state.update_data(current_park=park)

    if section == "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–µ—Å—è—Ü":
        await message.answer(f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –ø–∞—Ä–∫–∞ {park} ", reply_markup=get_main_menu())
    elif section == "–ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—é":
        await state.set_state(Form.waiting_for_print)
        await message.answer(f"üñ® –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–∞—Ä–∫–∞ {park}:", reply_markup=get_print_menu())
    elif section == "–î–æ–∫—É–º–µ–Ω—Ç—ã":
        await state.set_state(Form.waiting_for_document)
        await message.answer(f"üìÇ –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–∞—Ä–∫–∞ {park}:", reply_markup=get_document_menu())

@dp.message(Form.waiting_for_print, UserAccessFilter())
async def process_print(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é":
        await state.clear()
        await cmd_start(message, state)
        return
    await state.set_state(Form.in_section)
    await state.update_data(current_section=message.text)
    data = await state.get_data()
    park = data.get("current_park")
    await message.answer(f"üñ® {message.text} –¥–ª—è –ø–∞—Ä–∫–∞ {park} - –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞", reply_markup=get_print_menu())

@dp.message(Form.waiting_for_document, UserAccessFilter())
async def process_document(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é":
        await state.clear()
        await cmd_start(message, state)
        return
    await state.set_state(Form.in_section)
    await state.update_data(current_section=message.text)
    data = await state.get_data()
    park = data.get("current_park")
    await message.answer(f"üìÇ {message.text} –¥–ª—è –ø–∞—Ä–∫–∞ {park} - –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞", reply_markup=get_document_menu())

@dp.message(Form.in_section, UserAccessFilter())
async def process_section(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_section = data.get("current_section")

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º":
        await state.set_state(Form.waiting_for_instructor)
        await message.answer("üìã –í—ã–±–µ—Ä–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:", reply_markup=get_instructions_menu())
        return

    if current_section == "–ì—Ä–∞—Ñ–∏–∫ –∏ –∑–ø —Ç–∞–±–µ–ª—å":
        try:
            if message.text == "–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞":
                with open("–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞.jpg", "rb") as photo1, \
                        open("–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞2.jpg", "rb") as photo2, \
                        open("–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞3.jpg", "rb") as photo3:

                    media = [
                        InputMediaPhoto(media=BufferedInputFile(photo1.read(), filename="graph1.jpg")),
                        InputMediaPhoto(media=BufferedInputFile(photo2.read(), filename="graph2.jpg")),
                        InputMediaPhoto(media=BufferedInputFile(photo3.read(), filename="graph3.jpg"))
                    ]
                    await message.answer_media_group(media=media)

                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_schedule_menu())

            elif message.text == "–ê–ª–≥–æ—Ä–∏—Ç–º":
                with open("–∞–ª–≥–æ—Ä–∏—Ç–º –≥—Ä–∞—Ñ–∏–∫–ó–ü.jpg", "rb") as photo:
                    await message.answer_photo(BufferedInputFile(photo.read(), filename="algorithm.jpg"))
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_schedule_menu())

            elif message.text == "–ö–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç":
                with open("—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ó–ü —Ç–∞–±–µ–ª—å.jpg", "rb") as photo1, \
                        open("—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä–∞—Ñ–∏–∫.jpg", "rb") as photo2:

                    media = [
                        InputMediaPhoto(media=BufferedInputFile(photo1.read(), filename="result1.jpg")),
                        InputMediaPhoto(media=BufferedInputFile(photo2.read(), filename="result2.jpg"))
                    ]
                    await message.answer_media_group(media=media)

                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_schedule_menu())

            elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é":
                await state.clear()
                await cmd_start(message, state)

        except FileNotFoundError as e:
            await message.answer(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ({e})")
            logger.error(f"File not found: {e}")

    elif current_section == "–ò–Ω—Å–ø–µ–∫—Ü–∏—è –ò–°–°":
        try:
            if message.text == "–ê–ª–≥–æ—Ä–∏—Ç–º":
                with open("–∞–ª–≥–æ—Ä–∏—Ç–º –∏–Ω—Å–ø–µ–∫—Ü–∏—è.jpg", "rb") as photo:
                    await message.answer_photo(BufferedInputFile(photo.read(), filename="inspection_algorithm.jpg"))
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_inspection_menu())

            elif message.text == "–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å–æ —Å–ø–∏—Å–∞–Ω–Ω—ã–º —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ–º":
                with open("—Å–ø–∏—Å–∞–Ω–Ω–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ.jpg", "rb") as photo:
                    await message.answer_photo(BufferedInputFile(photo.read(), filename="equipment.jpg"))
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_inspection_menu())

            elif message.text == "–ö–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç":
                with open("—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å–ø–µ–∫—Ü–∏–∏.jpg", "rb") as photo:
                    await message.answer_photo(BufferedInputFile(photo.read(), filename="inspection_result.jpg"))
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_inspection_menu())

            elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é":
                await state.clear()
                await cmd_start(message, state)

        except FileNotFoundError as e:
            await message.answer(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ({e})")
            logger.error(f"File not found: {e}")

    elif "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é" in message.text:
        await state.clear()
        await cmd_start(message, state)

@dp.message()
async def handle_other(message: types.Message):
    if message.from_user.username not in ALLOWED_USERS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        await message.answer("‚Ñπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", reply_markup=get_main_menu())

if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        dp.run_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
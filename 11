from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = "7617868509:AAFf1Bfj6M872KnDMrrMHm6q5PzyYNjpsgs"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

class Form(StatesGroup):
    waiting_for_instructor = State()
    waiting_for_park = State()
    waiting_for_print = State()
    waiting_for_document = State()
    waiting_for_month = State()
    in_section = State()

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def build_keyboard(buttons: list, row_width: int = 2):
    builder = ReplyKeyboardBuilder()
    for button in buttons:
        builder.add(KeyboardButton(text=button))
    builder.adjust(row_width)
    return builder.as_markup(resize_keyboard=True)

def get_main_menu():
    return build_keyboard([
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–û–±—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤",
        "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–µ—Å—è—Ü", "–ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—é",
        "–î–æ–∫—É–º–µ–Ω—Ç—ã", "–í—ã—Ö–æ–¥"
    ], 2)

def get_instructions_menu():
    return build_keyboard([
        "–ö–∞–∫ –∏–º–µ–Ω–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", "–ì—Ä–∞—Ñ–∏–∫ –∏ –∑–ø —Ç–∞–±–µ–ª—å",
        "–ò–Ω—Å–ø–µ–∫—Ü–∏—è –ò–°–°", "–û–±—Ö–æ–¥ —Ç—Ä–∞—Å—Å",
        "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è", "–û—Ç—á–µ—Ç –ø–æ –Ω–∞–ª–∏—á–Ω—ã–º",
        "–ö–∞—Å—Å–æ–≤–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é"
    ], 2)

def get_instructors_menu():
    return build_keyboard([
        "–ß–µ–∫-–ª–∏—Å—Ç —Å—Ç–∞–∂—ë—Ä–∞", "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é"
    ], 2)

def get_parks_menu():
    return build_keyboard(["–ö–æ—à–∫–∏–Ω–æ", "–£–∫—Ç—É—Å", "–î—É–±—Ä–∞–≤–∞", "–ù–∏–∂–Ω–∏–π", "–¢—é–º–µ–Ω—å", "–ù–∞–∑–∞–¥"], 2)

def get_print_menu():
    return build_keyboard([
        "–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –∫–≤–µ—Å—Ç–æ–≤", "–ö–∞—Ä—Ç–∞ –ø–∞—Ä–∫–∞",
        "–¢–∞–±–ª–∏—á–∫–∏ –Ω–∞ –¥–µ—Ä–µ–≤—å—è", "–ö–∞—Å—Å–æ–≤—ã–π –¥–æ–º–∏–∫",
        "–û—Å—Ç–∞–ª—å–Ω–∞—è –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é"
    ], 2)

def get_document_menu():
    return build_keyboard([
        "–ë–ª–∞–Ω–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞", "–£–≥–æ–ª–æ–∫ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
        "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫", "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é"
    ], 2)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())

@dp.message(lambda message: message.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
async def select_instructions(message: types.Message, state: FSMContext):
    await state.set_state(Form.waiting_for_instructor)
    await message.answer("üìã –í—ã–±–µ—Ä–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:", reply_markup=get_instructions_menu())

@dp.message(lambda message: message.text == "–û–±—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤")
async def select_instructors(message: types.Message, state: FSMContext):
    await state.set_state(Form.waiting_for_instructor)
    await message.answer("üë®‚Äçüè´ –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –æ–±—É—á–µ–Ω–∏—è:", reply_markup=get_instructors_menu())

@dp.message(lambda message: message.text == "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–µ—Å—è—Ü")
async def select_month_park(message: types.Message, state: FSMContext):
    await state.set_state(Form.waiting_for_park)
    await state.update_data(section="–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–µ—Å—è—Ü")
    await message.answer("üìÖ –í—ã–±–µ—Ä–∏ –ø–∞—Ä–∫:", reply_markup=get_parks_menu())

@dp.message(lambda message: message.text == "–ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—é")
async def select_print_park(message: types.Message, state: FSMContext):
    await state.set_state(Form.waiting_for_park)
    await state.update_data(section="–ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—é")
    await message.answer("üñ® –í—ã–±–µ—Ä–∏ –ø–∞—Ä–∫:", reply_markup=get_parks_menu())

@dp.message(lambda message: message.text == "–î–æ–∫—É–º–µ–Ω—Ç—ã")
async def select_document_park(message: types.Message, state: FSMContext):
    await state.set_state(Form.waiting_for_park)
    await state.update_data(section="–î–æ–∫—É–º–µ–Ω—Ç—ã")
    await message.answer("üìÇ –í—ã–±–µ—Ä–∏ –ø–∞—Ä–∫:", reply_markup=get_parks_menu())

@dp.message(Form.waiting_for_instructor)
async def process_instructions(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é":
        await state.clear()
        await cmd_start(message, state)
        return
    await state.set_state(Form.in_section)
    await state.update_data(current_section=message.text)
    if message.text == "–ß–µ–∫-–ª–∏—Å—Ç —Å—Ç–∞–∂—ë—Ä–∞":
        await message.answer(f"üë®‚Äçüè´ –ß–µ–∫-–ª–∏—Å—Ç —Å—Ç–∞–∂—ë—Ä–∞ - –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞", reply_markup=get_main_menu())
    else:
        await message.answer(f"üìã {message.text} - –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞", reply_markup=get_instructions_menu())

@dp.message(Form.waiting_for_park)
async def process_park(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.clear()
        await cmd_start(message, state)
        return

    data = await state.get_data()
    park = message.text
    section = data.get("section")

    await state.set_state(Form.in_section)
    await state.update_data(current_park=park)

    if section == "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–µ—Å—è—Ü":
        await message.answer(f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –ø–∞—Ä–∫–∞ {park} ", reply_markup=get_main_menu())
    elif section == "–ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—é":
        await state.set_state(Form.waiting_for_print)
        await message.answer(f"üñ® –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–∞—Ä–∫–∞ {park}:", reply_markup=get_print_menu())
    elif section == "–î–æ–∫—É–º–µ–Ω—Ç—ã":
        await state.set_state(Form.waiting_for_document)
        await message.answer(f"üìÇ –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–∞—Ä–∫–∞ {park}:", reply_markup=get_document_menu())

@dp.message(Form.waiting_for_print)
async def process_print(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é":
        await state.clear()
        await cmd_start(message, state)
        return
    await state.set_state(Form.in_section)
    await state.update_data(current_section=message.text)
    data = await state.get_data()
    park = data.get("current_park")
    await message.answer(f"üñ® {message.text} –¥–ª—è –ø–∞—Ä–∫–∞ {park} - –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞", reply_markup=get_print_menu())

@dp.message(Form.waiting_for_document)
async def process_document(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é":
        await state.clear()
        await cmd_start(message, state)
        return
    await state.set_state(Form.in_section)
    await state.update_data(current_section=message.text)
    data = await state.get_data()
    park = data.get("current_park")
    await message.answer(f"üìÇ {message.text} –¥–ª—è –ø–∞—Ä–∫–∞ {park} - –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞", reply_markup=get_document_menu())

@dp.message(Form.in_section)
async def process_section(message: types.Message, state: FSMContext):
    if "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é" in message.text:
        await state.clear()
        await cmd_start(message, state)

@dp.message()
async def handle_other(message: types.Message):
    await message.answer("‚Ñπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", reply_markup=get_main_menu())

if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        dp.run_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")



from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import BufferedInputFile, InputMediaPhoto, InputMediaDocument
import logging
import sqlite3
import datetime
import subprocess, os
from datetime import timedelta
import asyncio
from zoneinfo import ZoneInfo
import sys
from pathlib import Path

BASE_DIR = Path(__file__).parent  # –ø–∞–ø–∫–∞, –≥–¥–µ –ª–µ–∂–∏—Ç main.py
VIDEO_DIR = BASE_DIR
FFMPEG_PATH = BASE_DIR
VIDEO_EXTS = ["*.mp4","*.MP4"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8385302636:AAHDgQF-rHDr__1Iov9v8iIixKI5vK8oeJ8"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ß–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
MSK_TZ = ZoneInfo("Europe/Moscow")
UTC_TZ = ZoneInfo("UTC")

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ALLOWED_USERS = {
    "@burgerking312",
    "@veron144ka",
    "@DashaRyzhova",
    "@loreley1264",
    "@vaditmn",
    "@olikburlakova",
    "@milkenxxx",
    "@astratov_roman"

}

ADMIN_USERS = {"@burgerking312","@veron144ka",  "@DashaRyzhova"}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
async def check_admin(username: str) -> bool:
    return username in ADMIN_USERS

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π
async def clean_old_events_task():
    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π")
    while True:
        try:
            clean_old_events(days=1)  # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏: {e}")
        await asyncio.sleep(86400)  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ (86400 —Å–µ–∫—É–Ω–¥)


def get_allowed_users_chat_ids():
    """–ü–æ–ª—É—á–∞–µ–º chat_id –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('events.db')
    c = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è IN-—É—Å–ª–æ–≤–∏—è
    placeholders = ','.join(['?'] * len(ALLOWED_USERS))
    query = f"SELECT DISTINCT chat_id FROM users WHERE username IN ({placeholders})"

    c.execute(query, list(ALLOWED_USERS))
    chat_ids = [row[0] for row in c.fetchall()]
    conn.close()
    return chat_ids


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('events.db')
    c = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–±—ã—Ç–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
    c.execute('''CREATE TABLE IF NOT EXISTS events
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                 park TEXT NOT NULL,
                 event_date TEXT NOT NULL,
                 event_text TEXT NOT NULL,
                 remind_before INTEGER NOT NULL,
                 user_id TEXT NOT NULL,
                 chat_id INTEGER NOT NULL,
                 reminded INTEGER DEFAULT 0)''')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ comment
    c.execute("PRAGMA table_info(events)")
    columns = [column[1] for column in c.fetchall()]
    if 'comment' not in columns:
        c.execute("ALTER TABLE events ADD COLUMN comment TEXT")
        logger.info("–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü 'comment' –≤ —Ç–∞–±–ª–∏—Ü—É events")

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                 username TEXT NOT NULL UNIQUE,
                 chat_id INTEGER NOT NULL)''')

    conn.commit()
    conn.close()


init_db()


class Form(StatesGroup):
    waiting_for_instructor = State()
    waiting_for_park = State()
    waiting_for_print = State()
    waiting_for_document = State()
    waiting_for_month = State()
    in_section = State()
    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    waiting_for_event_date = State()
    waiting_for_event_text = State()
    waiting_for_remind_before = State()
    waiting_for_comment = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    waiting_for_event_to_delete = State()
    in_instructions = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    in_training = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    in_calendar = State()


async def send_compressed_video(message: types.Message, input_name: str, caption: str = None):
    input_path = VIDEO_DIR / input_name
    output_name = f"compressed_{input_name}"
    output_path = VIDEO_DIR / output_name

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_size_mb = input_path.stat().st_size / (1024 * 1024)
        logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {input_name}: {file_size_mb:.1f} –ú–ë")

        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∏ –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º—Å—è
        if file_size_mb > 100:  # –ë–æ–ª—å—à–µ 100 –ú–ë
            await message.answer(
                f"‚ùå –§–∞–π–ª {input_name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.1f} –ú–ë). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 100 –ú–ë.")
            return

        await message.answer("üîÑ –ò–¥—ë—Ç —Å–∂–∞—Ç–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")

        if file_size_mb > 30:  # –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (>30 –ú–ë)
            await message.answer(
                f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª ({file_size_mb:.1f} –ú–ë), —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2-3 –º–∏–Ω—É—Ç...")

        # –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∂–∞—Ç–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
        if "–ö–æ–º—É—Å" in input_name or file_size_mb > 50:
            # –î–ª—è –ö–æ–º—É—Å –∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ - –±—ã—Å—Ç—Ä–æ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
            ffmpeg_command = [
                "ffmpeg", "-y",
                "-i", str(input_path),
                "-vcodec", "libx264",
                "-preset", "ultrafast",  # –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –ø—Ä–µ—Å–µ—Ç
                "-crf", "30",  # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
                "-vf", "scale=1280:720",  # –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 720p
                "-acodec", "aac", "-b:a", "64k",  # –ù–∏–∑–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ
                "-movflags", "+faststart",  # –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
                str(output_path)
            ]
            logger.info(f"–ü—Ä–∏–º–µ–Ω—è–µ–º –±—ã—Å—Ç—Ä–æ–µ —Å–∂–∞—Ç–∏–µ –¥–ª—è {input_name}")
        elif file_size_mb > 20:  # –°—Ä–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
            ffmpeg_command = [
                "ffmpeg", "-y",
                "-i", str(input_path),
                "-vcodec", "libx264",
                "-preset", "fast",
                "-crf", "28",
                "-acodec", "aac", "-b:a", "96k",
                str(output_path)
            ]
        else:  # –ú–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã
            ffmpeg_command = [
                "ffmpeg", "-y",
                "-i", str(input_path),
                "-vcodec", "libx264",
                "-preset", "medium",
                "-crf", "26",
                "-acodec", "aac", "-b:a", "96k",
                str(output_path)
            ]

        result = subprocess.run(ffmpeg_command)

        if result.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ ffmpeg –¥–ª—è —Ñ–∞–π–ª–∞: {input_name}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –≤–∏–¥–µ–æ: {input_name}")
            return

        if not output_path.exists():
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª: {output_name}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        compressed_size_mb = output_path.stat().st_size / (1024 * 1024)
        logger.info(f"–°–∂–∞—Ç—ã–π —Ñ–∞–π–ª: {compressed_size_mb:.1f} –ú–ë")

        # Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç 50 –ú–ë –¥–ª—è –≤–∏–¥–µ–æ
        if compressed_size_mb > 50:
            await message.answer(
                f"‚ùå –°–∂–∞—Ç—ã–π —Ñ–∞–π–ª –≤—Å—ë –µ—â—ë —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({compressed_size_mb:.1f} –ú–ë). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ
        with open(output_path, "rb") as f:
            await message.answer_video(
                BufferedInputFile(f.read(), filename=output_name),
                caption=caption or "–í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
            )

        logger.info(
            f"–í–∏–¥–µ–æ {input_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–±—ã–ª–æ: {file_size_mb:.1f} –ú–ë, —Å—Ç–∞–ª–æ: {compressed_size_mb:.1f} –ú–ë)")

    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
        await message.answer(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_name}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ {input_name}: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            if output_path.exists():
                output_path.unlink()
        except OSError as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {output_name}: {e}")


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
async def check_access(username: str) -> bool:
    if username in ALLOWED_USERS:
        return True
    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
    return False


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
def access_check(func):
    async def wrapper(message: types.Message, *args, **kwargs):
        username = f"@{message.from_user.username}" if message.from_user.username else None
        if not username or not await check_access(username):
            await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
            return
        return await func(message, *args, **kwargs)

    return wrapper

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
def admin_check(func):
    async def wrapper(message: types.Message, *args, **kwargs):
        username = f"@{message.from_user.username}" if message.from_user.username else None
        if not username or not await check_admin(username):
            await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è.")
            return
        return await func(message, *args, **kwargs)
    return wrapper


# –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def build_keyboard(buttons: list, row_width: int = 2):
    builder = ReplyKeyboardBuilder()
    for button in buttons:
        builder.add(KeyboardButton(text=button))
    builder.adjust(row_width)
    return builder.as_markup(resize_keyboard=True)


def clean_old_events(days=1):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è, –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ—Å—è –±–æ–ª–µ–µ days –¥–Ω–µ–π –Ω–∞–∑–∞–¥"""
    conn = None
    try:
        conn = sqlite3.connect('events.db')
        c = conn.cursor()

        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Ä–∞–Ω—å—à–µ —á–µ–º X –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        delete_time_utc = (datetime.datetime.now(UTC_TZ) - timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        c.execute("SELECT COUNT(*) FROM events WHERE event_date < ?", (delete_time_utc,))
        count_before = c.fetchone()[0]

        c.execute("DELETE FROM events WHERE event_date < ?", (delete_time_utc,))
        deleted_count = c.rowcount
        conn.commit()

        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count}/{count_before} —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π (—Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()


def get_start_menu():
    return build_keyboard(["–ù–∞—á–∞–ª–æ"], 1)


def get_main_menu(username: str = None):
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    base_buttons = [
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–û–±—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤",
        "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫"
    ]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤–º–µ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ —Å–æ–±—ã—Ç–∏–π
    if username and username in ADMIN_USERS:
        base_buttons.append("–ö–∞–ª–µ–Ω–¥–∞—Ä—å")  # –ó–∞–º–µ–Ω—è–µ–º —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ–¥–Ω—É

    return build_keyboard(base_buttons, 3)

def get_handbook_menu():
    return build_keyboard([
        "–ö–æ–Ω—Ç–∞–∫—Ç—ã –ü–ú", "–ò–ù–ù",
        "–ë–ª–∞–Ω–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞", "–ö–∞—Ä—Ç–æ—á–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π",
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é"
    ], 2)


# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –º–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def get_calendar_menu():
    return build_keyboard([
        "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", "–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è",
        "–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é"
    ], 2)

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
def get_cancel_keyboard():
    return build_keyboard(["–û—Ç–º–µ–Ω–∞"], 1)



def get_instructions_menu():
    return build_keyboard([
        "–ö–∞–∫ –∏–º–µ–Ω–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç—ã",
        "–ì—Ä–∞—Ñ–∏–∫ –∏ –∑–ø —Ç–∞–±–µ–ª—å",
        "–ò–Ω—Å–ø–µ–∫—Ü–∏—è –ò–°–°",
        "–ù–∞–ª–∏—á–Ω—ã–µ",
        "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è",  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é"
    ], 2)

def get_inventory_menu():
    return build_keyboard([
        "–ê–ª–≥–æ—Ä–∏—Ç–º", "–ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç—å?",
        "–ó–∞–∫—Ä—ã–≤–∞—à–∫–∏", "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
        "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ (–≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏)",
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º"
    ], 2)

def get_order_video_menu():
    return build_keyboard([
        "–õ–µ—Ä—É–∞", "–ö–æ–º—É—Å",
        "–í—Å–µ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
        "–ù–∞–∑–∞–¥ –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏"
    ], 2)

def get_cash_menu():
    return build_keyboard([
        "–ê–ª–≥–æ—Ä–∏—Ç–º", "–ö–∞–∫ —Ç—Ä–∞—Ç–∏–º",
        "–†–µ–∑—É–ª—å—Ç–∞—Ç", "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º"  # –ò–∑–º–µ–Ω–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–æ—Ç–æ
    ], 2)

def get_instructors_menu():
    return build_keyboard([
        "–ß–µ–∫-–ª–∏—Å—Ç —Å—Ç–∞–∂—ë—Ä–∞",
        "–ö–æ–≥–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–∞ –ø–æ–ª–Ω—É—é —Å—Ç–∞–≤–∫—É?",  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        "–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è",  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é"
    ], 2)


def get_parks_menu():
    return build_keyboard(["–ö–æ—à–∫–∏–Ω–æ", "–£–∫—Ç—É—Å", "–î—É–±—Ä–∞–≤–∞", "–ù–∏–∂–Ω–∏–π", "–¢—é–º–µ–Ω—å", "–ù–∞–∑–∞–¥"], 2)





def get_schedule_menu():
    return build_keyboard([
        "–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞",
        "–ê–ª–≥–æ—Ä–∏—Ç–º",
        "–ö–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º"
    ], 2)


def get_inspection_menu():
    return build_keyboard([
        "–ê–ª–≥–æ—Ä–∏—Ç–º",
        "–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å–æ —Å–ø–∏—Å–∞–Ω–Ω—ã–º —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ–º",
        "–ö–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º"
    ], 2)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
def save_event(event_date, event_text, remind_before, user_id, chat_id, comment=""):
    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –∫–∞–∫ –Ω–∞–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º MSK)
        naive_dt = datetime.datetime.strptime(event_date, "%d.%m.%Y %H:%M")
        logger.info(f"–í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–∏–≤–Ω–æ–µ): {naive_dt}")

        # –î–æ–±–∞–≤–ª—è–µ–º MSK TZ
        msk_dt = naive_dt.replace(tzinfo=MSK_TZ)
        logger.info(f"–í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (MSK): {msk_dt}")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ UTC
        utc_dt = msk_dt.astimezone(UTC_TZ)
        event_date_sql = utc_dt.strftime("%Y-%m-%d %H:%M:%S")
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (UTC): {event_date_sql}")

        conn = sqlite3.connect('events.db')
        c = conn.cursor()
        c.execute("PRAGMA table_info(events)")
        columns = [col[1] for col in c.fetchall()]
        has_comment = 'comment' in columns

        if has_comment:
            c.execute(
                "INSERT INTO events (park, event_date, event_text, remind_before, user_id, chat_id, comment) "
                "VALUES (?, ?, ?, ?, ?, ?, ?)",
                ("–û–±—â–µ–µ", event_date_sql, event_text, remind_before, user_id, chat_id, comment)
            )
        else:
            c.execute(
                "INSERT INTO events (park, event_date, event_text, remind_before, user_id, chat_id) "
                "VALUES (?, ?, ?, ?, ?, ?)",
                ("–û–±—â–µ–µ", event_date_sql, event_text, remind_before, user_id, chat_id)
            )
            logger.warning("–°—Ç–æ–ª–±–µ—Ü 'comment' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()


def get_user_events(user_id):
    """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('events.db')
    c = conn.cursor()
    now_utc = datetime.datetime.now(UTC_TZ).strftime("%Y-%m-%d %H:%M:%S")
    c.execute("SELECT * FROM events WHERE user_id=? AND event_date >= ? ORDER BY event_date", (user_id, now_utc))
    events = c.fetchall()

    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–±—ã—Ç–∏—è
    if events:
        logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–±—ã—Ç–∏—è: {len(events[0])} –ø–æ–ª–µ–π")

    conn.close()
    return events


def get_events_to_remind():
    conn = sqlite3.connect('events.db')
    c = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
    now_utc = datetime.datetime.now(UTC_TZ).strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC: {now_utc}")

    # –ó–∞–ø—Ä–æ—Å –≤ UTC
    query = """
        SELECT 
            id, park, event_date, event_text, remind_before, user_id, chat_id, reminded, comment
        FROM events 
        WHERE reminded = 0 
        AND datetime(event_date, '-' || remind_before || ' minutes') <= datetime('now')
        """

    try:
        c.execute(query)
        events = c.fetchall()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ SQL –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–±—ã—Ç–∏–π: {e}")
        events = []

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")

    for event in events:
        event_id, park, event_date, event_text, remind_before, user_id, chat_id, reminded, comment = event
        logger.info(f"–°–æ–±—ã—Ç–∏–µ ID {event_id}: –î–∞—Ç–∞ (UTC): {event_date}")

    conn.close()
    return events


def mark_event_reminded(event_id):
    conn = sqlite3.connect('events.db')
    c = conn.cursor()
    c.execute("UPDATE events SET reminded=1 WHERE id=?", (event_id,))
    conn.commit()
    conn.close()


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def check_reminders():
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    while True:
        try:
            events = get_events_to_remind()
            logger.info(f"–°–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(events)}")

            # –ü–æ–ª—É—á–∞–µ–º chat_id –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            chat_ids = get_allowed_users_chat_ids()
            logger.info(f"–ß–∞—Ç-IDs –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {chat_ids}")

            if not chat_ids:
                logger.warning("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

            for event in events:
                # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ 9 –∑–Ω–∞—á–µ–Ω–∏–π
                event_id, park, event_date_utc, event_text, remind_minutes, user_id, chat_id_val, reminded_flag, comment = event

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —á–∞—Å—ã
                hours = remind_minutes // 60

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤ MSK –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                utc_dt = datetime.datetime.strptime(event_date_utc, "%Y-%m-%d %H:%M:%S").replace(tzinfo=UTC_TZ)
                msk_dt = utc_dt.astimezone(MSK_TZ)
                # –ù–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:
                month_names = [
                    "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
                    "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
                ]
                day = msk_dt.day
                month = month_names[msk_dt.month - 1]
                time_str = msk_dt.strftime("%H:%M")
                event_time_str = f"{day} {month} {time_str}"

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                reminder_text = (
                    "üå≥ –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞\n\n"
                    f" –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event_text}\n"
                    f" –î–µ–¥–ª–∞–π–Ω: {event_time_str}\n"
                )

                if comment:
                    reminder_text += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                for user_chat_id in chat_ids:
                    try:
                        await bot.send_message(chat_id=user_chat_id, text=reminder_text)
                        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {user_chat_id} –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {user_chat_id}: {e}")

                # –ü–æ–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                mark_event_reminded(event_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}", exc_info=True)
            await asyncio.sleep(10)

        await asyncio.sleep(30)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
@access_check
async def cmd_start(message: types.Message, state: FSMContext, **kwargs):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username = f"@{message.from_user.username}" if message.from_user.username else str(message.from_user.id)
    chat_id = message.chat.id

    conn = sqlite3.connect('events.db')
    c = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                 username TEXT NOT NULL UNIQUE,
                 chat_id INTEGER NOT NULL)''')

    # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    c.execute("INSERT OR REPLACE INTO users (username, chat_id) VALUES (?, ?)",
              (username, chat_id))

    conn.commit()
    conn.close()

    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(username))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö–∞–ª–µ–Ω–¥–∞—Ä—å"
@dp.message(lambda message: message.text == "–ö–∞–ª–µ–Ω–¥–∞—Ä—å")
@access_check
@admin_check
async def calendar_menu(message: types.Message, state: FSMContext, **kwargs):
    await state.set_state(Form.in_calendar)
    await message.answer("üìÖ –ú–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è:", reply_markup=get_calendar_menu())


@dp.message(lambda message: message.text == "–ù–∞—á–∞–ª–æ")
@access_check
async def handle_start_button(message: types.Message, state: FSMContext, **kwargs):
    username = f"@{message.from_user.username}" if message.from_user.username else str(message.from_user.id)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                         reply_markup=get_main_menu(username))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@dp.message(Form.in_calendar, lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
@access_check
@admin_check
async def add_event_start(message: types.Message, state: FSMContext, **kwargs):
    await state.set_state(Form.waiting_for_event_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2025 15:00):",
                         reply_markup=get_cancel_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω—ã –î–û –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
@dp.message(Form.waiting_for_event_date, lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
@dp.message(Form.waiting_for_event_text, lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
@dp.message(Form.waiting_for_remind_before, lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
@dp.message(Form.waiting_for_comment, lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
@dp.message(Form.waiting_for_event_to_delete, lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
@access_check
@admin_check
async def cancel_operation(message: types.Message, state: FSMContext, **kwargs):
    await state.set_state(Form.in_calendar)
    await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_calendar_menu())

@dp.message(Form.waiting_for_event_date)
@access_check
@admin_check
async def process_event_date(message: types.Message, state: FSMContext, **kwargs):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        datetime.datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        await state.update_data(event_date=message.text)
        await state.set_state(Form.waiting_for_event_text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:", reply_markup=get_cancel_keyboard())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2025 15:00)")

@dp.message(Form.waiting_for_event_text)
@access_check
@admin_check
async def process_event_text(message: types.Message, state: FSMContext, **kwargs):
    await state.update_data(event_text=message.text)
    await state.set_state(Form.waiting_for_remind_before)
    await message.answer("–ó–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –¥–æ —Å–æ–±—ã—Ç–∏—è –Ω–∞–ø–æ–º–Ω–∏—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):", reply_markup=get_cancel_keyboard())

@dp.message(Form.waiting_for_remind_before)
@access_check
@admin_check
async def process_remind_before(message: types.Message, state: FSMContext, **kwargs):
    try:
        hours = int(message.text)
        if hours <= 0:
            raise ValueError

        minutes = hours * 60
        await state.update_data(remind_before=minutes)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        await state.set_state(Form.waiting_for_comment)
        await message.answer("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–æ–±—ã—Ç–∏—é (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):", reply_markup=get_cancel_keyboard())
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤.")

@dp.message(Form.waiting_for_comment)
@access_check
@admin_check
async def process_comment(message: types.Message, state: FSMContext, **kwargs):
    comment = message.text
    if comment.strip() == "-":
        comment = ""  # –ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è

    data = await state.get_data()
    username = f"@{message.from_user.username}" if message.from_user.username else str(message.from_user.id)

    save_event(
        event_date=data['event_date'],
        event_text=data['event_text'],
        remind_before=data['remind_before'],
        user_id=username,
        chat_id=message.chat.id,
        comment=comment
    )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–≤ MSK)
    naive_dt = datetime.datetime.strptime(data['event_date'], "%d.%m.%Y %H:%M")
    msk_dt = naive_dt.replace(tzinfo=MSK_TZ)
    month_names = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ]
    day = msk_dt.day
    month = month_names[msk_dt.month - 1]
    time_str = msk_dt.strftime("%H:%M")
    formatted_date = f"{day} {month} {msk_dt.year} –≤ {time_str}"
    response = (
        f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
        f" –î–µ–¥–ª–∞–π–Ω: {formatted_date}\n"
        f" –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {data['event_text']}\n"
        f" –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {data['remind_before'] // 60} —á–∞—Å–æ–≤ –¥–æ —Å–æ–±—ã—Ç–∏—è"
    )

    if comment:
        response += f"\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"

    await message.answer(response)
    await state.set_state(Form.in_calendar)
    await message.answer("üìÖ –ú–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è:", reply_markup=get_calendar_menu())

@dp.message(Form.in_calendar, lambda message: message.text == "–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è")
@access_check
@admin_check
async def show_user_events(message: types.Message, **kwargs):
    username = f"@{message.from_user.username}" if message.from_user.username else str(message.from_user.id)
    events = get_user_events(username)

    if not events:
        await message.answer("üìÖ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π.", reply_markup=get_calendar_menu())
        return

    response = "üìÖ –í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
    for event in events:
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø–æ–ª–µ–π
        event_id = event[0]
        event_date_utc = event[2]  # UTC –≤—Ä–µ–º—è
        event_text = event[3]
        remind_minutes = event[4]
        comment = event[8] if len(event) > 8 else ""  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤ MSK
        utc_dt = datetime.datetime.strptime(event_date_utc, "%Y-%m-%d %H:%M:%S").replace(tzinfo=UTC_TZ)
        msk_dt = utc_dt.astimezone(MSK_TZ)
        event_time = msk_dt.strftime("%d.%m.%Y %H:%M")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —á–∞—Å—ã
        hours = remind_minutes // 60

        response += f"üÜî ID: {event_id}\n"
        response += f" –í—Ä–µ–º—è: {event_time}\n"
        response += f" –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event_text}\n"
        if comment:
            response += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
        response += f"‚è± –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {hours} —á–∞—Å–æ–≤ –¥–æ —Å–æ–±—ã—Ç–∏—è\n"
        response += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    await message.answer(response, reply_markup=get_calendar_menu())


@dp.message(Form.in_calendar, lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
@access_check
@admin_check
async def delete_event_start(message: types.Message, state: FSMContext, **kwargs):
    username = f"@{message.from_user.username}" if message.from_user.username else str(message.from_user.id)
    events = get_user_events(username)

    if not events:
        await message.answer("üìÖ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_calendar_menu())
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å ID
    response = "üìÖ –í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
    for event in events:
        event_id = event[0]
        event_date_utc = event[2]
        event_text = event[3]

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MSK
        utc_dt = datetime.datetime.strptime(event_date_utc, "%Y-%m-%d %H:%M:%S").replace(tzinfo=UTC_TZ)
        msk_dt = utc_dt.astimezone(MSK_TZ)
        event_time = msk_dt.strftime("%d.%m.%Y %H:%M")

        response += f"üÜî ID: {event_id}\n"
        response += f"‚è∞ –í—Ä–µ–º—è: {event_time}\n"
        response += f"üìù –°–æ–±—ã—Ç–∏–µ: {event_text}\n"
        response += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    response += "\n–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'):"
    await message.answer(response, reply_markup=get_cancel_keyboard())
    await state.set_state(Form.waiting_for_event_to_delete)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é" –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
@dp.message(Form.in_calendar, lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é")
@access_check
@admin_check
async def calendar_back_to_main(message: types.Message, state: FSMContext, **kwargs):
    await state.clear()
    username = f"@{message.from_user.username}" if message.from_user.username else str(message.from_user.id)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(username))



@dp.message(Form.waiting_for_event_to_delete)
@access_check
async def process_event_delete(message: types.Message, state: FSMContext, **kwargs):
    conn = None
    try:
        event_id = int(message.text)
        username = f"@{message.from_user.username}" if message.from_user.username else str(message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        conn = sqlite3.connect('events.db')
        c = conn.cursor()
        c.execute("SELECT id FROM events WHERE id=? AND user_id=?", (event_id, username))
        event_exists = c.fetchone()

        if event_exists:
            c.execute("DELETE FROM events WHERE id=?", (event_id,))
            conn.commit()
            await message.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å ID {event_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
        else:
            await message.answer("‚ùå –°–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —Å–æ–±—ã—Ç–∏—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
    finally:
        if conn:
            conn.close()
        await state.set_state(Form.in_calendar)
        await message.answer("üìÖ –ú–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è:", reply_markup=get_calendar_menu())

@dp.message(lambda message: message.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
@access_check
async def select_instructions(message: types.Message, state: FSMContext, **kwargs):
    await state.set_state(Form.in_instructions)
    await message.answer("üìã –í—ã–±–µ—Ä–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:", reply_markup=get_instructions_menu())

@dp.message(lambda message: message.text == "–û–±—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤")
@access_check
async def select_instructors(message: types.Message, state: FSMContext, **kwargs):
    await state.set_state(Form.in_training)
    await message.answer("üë®‚Äçüè´ –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –æ–±—É—á–µ–Ω–∏—è:", reply_markup=get_instructors_menu())


@dp.message(Form.in_instructions)
@access_check
async def process_instructions(message: types.Message, state: FSMContext, **kwargs):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é":
        await state.clear()
        await cmd_start(message, state)
        return


    if message.text == "–ù–∞–ª–∏—á–Ω—ã–µ":
        await state.set_state(Form.in_section)
        await state.update_data(current_section=message.text)
        await message.answer("–ù–∞–ª–∏—á–Ω—ã–µ:", reply_markup=get_cash_menu())
    elif message.text == "–ì—Ä–∞—Ñ–∏–∫ –∏ –∑–ø —Ç–∞–±–µ–ª—å":
        await state.set_state(Form.in_section)
        await state.update_data(current_section=message.text)
        await message.answer("üìÖ –ì—Ä–∞—Ñ–∏–∫ –∏ –∑–ø —Ç–∞–±–µ–ª—å:", reply_markup=get_schedule_menu())
    elif message.text == "–ò–Ω—Å–ø–µ–∫—Ü–∏—è –ò–°–°":
        await state.set_state(Form.in_section)
        await state.update_data(current_section=message.text)
        await message.answer("üîç –ò–Ω—Å–ø–µ–∫—Ü–∏—è –ò–°–°:", reply_markup=get_inspection_menu())
    elif message.text == "–ö–∞–∫ –∏–º–µ–Ω–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç—ã":
        await message.answer("üìù –ü—Ä–∞–≤–∏–ª–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n\n"
                "–î–ª—è –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ª–∏—Å—Ç—ã (–±—ç–∫–∞–ø–∏–º)\n\n"
                "‚Ä¢ –ó–ü —Ç–∞–±–µ–ª—å: –ó–ü –ü–∞—Ä–∫ –ø–µ—Ä–∏–æ–¥\n"
                "–ü—Ä–∏–º–µ—Ä: –ó–ü –ö–æ—à–∫–∏–Ω–æ 16.07.-31.07.\n\n"
                "‚Ä¢ –°—á–µ—Ç–∞: –•–æ–∑—Ä–∞—Å—Ö–æ–¥—ã –ü–∞—Ä–∫ –ú–∞–≥–∞–∑–∏–Ω –î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞\n"
                "–ü—Ä–∏–º–µ—Ä: –•–æ–∑—Ä–∞—Å—Ö–æ–¥—ã –ö–æ—à–∫–∏–Ω–æ –ö–æ–º—É—Å 12.05.\n\n"
                "‚Ä¢ –û—Ç—á–µ—Ç –ø–æ –Ω–∞–ª–∏—á–Ω—ã–º: –ü–∞—Ä–∫ –•–æ–∑—Ä–∞—Å—Ö–æ–¥—ã –ú–µ—Å—è—Ü\n"
                "–ü—Ä–∏–º–µ—Ä: –ö–æ—à–∫–∏–Ω–æ –•–æ–∑—Ä–∞—Å—Ö–æ–¥—ã –∏—é–Ω—å\n\n"
                "‚Ä¢ –ò–Ω—Å–ø–µ–∫—Ü–∏—è –ò–°–°: –ò–Ω—Å–ø–µ–∫—Ü–∏—è –ò–°–° –î–∞—Ç–∞\n"
                "–ü—Ä–∏–º–µ—Ä: –ò–Ω—Å–ø–µ–∫—Ü–∏—è –ò–°–° 15.08.2023", reply_markup=get_instructions_menu())
    elif message.text == "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è":
        await state.set_state(Form.in_section)
        await state.update_data(current_section=message.text)
        await message.answer("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è:", reply_markup=get_inventory_menu())
    else:
        await message.answer("üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", reply_markup=get_instructions_menu())


@dp.message(Form.in_training)
@access_check
async def process_training(message: types.Message, state: FSMContext, **kwargs):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é":
        await state.clear()
        await cmd_start(message, state)
        return

    if message.text == "–ß–µ–∫-–ª–∏—Å—Ç —Å—Ç–∞–∂—ë—Ä–∞":
        await message.answer(f"https://docs.google.com/spreadsheets/d/1znrHWMowytgYcWlTZwyzJFmlh1hEL2sI-D6tnPTSYvM/edit?gid=0#gid=0")
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª
            with open("—á–µ–∫-–ª–∏—Å—Ç —Å—Ç–∞–∂—ë—Ä—ã.pdf", "rb") as pdf_file:
                await message.answer_document(
                    BufferedInputFile(
                        pdf_file.read(),
                        filename="—á–µ–∫-–ª–∏—Å—Ç —Å—Ç–∞–∂—ë—Ä—ã.pdf"
                    ),
                    caption="üìÑ –ß–µ–∫-–ª–∏—Å—Ç —Å—Ç–∞–∂—ë—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF"
                )
        except FileNotFoundError:
            await message.answer("‚ùå –§–∞–π–ª —á–µ–∫-–ª–∏—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞")
        await message.answer("üë®‚Äçüè´ –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –æ–±—É—á–µ–Ω–∏—è:", reply_markup=get_instructors_menu())

    elif message.text == "–ö–æ–≥–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–∞ –ø–æ–ª–Ω—É—é —Å—Ç–∞–≤–∫—É?":
        response = (
            "üìå –ö–æ–≥–¥–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –º–æ–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–∞ –ø–æ–ª–Ω—É—é —Å—Ç–∞–≤–∫—É?\n\n"
            "–ö–æ–≥–¥–∞ —Å—Ç–∞–∂—ë—Ä —Å–¥–∞–ª –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞—á–µ—Ç—ã:\n"
            "‚úÖ –ó–Ω–∞–Ω–∏–µ –¥–æ–ø—É—Å–∫–æ–≤ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è (–≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏ –∑–¥–æ—Ä–æ–≤—å–µ)\n"
            "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
            "‚úÖ –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–∞ (–≤–º–µ—Å—Ç–µ —Å –∫–∞—Ä—Ç–æ–π)\n"
            "‚úÖ –°–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ –≤—Ä–µ–º—è:\n"
            "   - –°–ø—É—Å–∫ —Å —ç—Ç–∞–ø–∞\n"
            "   - –°–ø—É—Å–∫ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n"
            "   - –†–∞–±–æ—Ç–∞ –≤ —Ç–∞–Ω–¥–µ–º–µ\n"
            "   - –°–∞–º–æ—Å–ø—É—Å–∫\n"
            "‚úÖ –ù–∞–¥–µ–≤–∞–Ω–∏–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è (–≤–∑—Ä–æ—Å–ª–æ–µ/–¥–µ—Ç—Å–∫–æ–µ, —à–ª–µ–º—ã)\n"
            "‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–∞—Å—Å–æ–≤—ã–º –ü–û:\n"
            "   - –ü—Ä–æ–¥–∞–∂–∞ –±–∏–ª–µ—Ç–æ–≤\n"
            "   - –ü—Ä–æ–¥–∞–∂–∞ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤\n\n"
            "‚è± –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: 3-5 —Å–º–µ–Ω\n"
            "‚ùå –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±–æ–ª–µ–µ 7 —Å—Ç–∞–∂–µ—Ä—Å–∫–∏—Ö —Å–º–µ–Ω"
        )
        await message.answer(response)

    elif message.text == "–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è":
        response = (
            "üìã –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:\n\n"
            "‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç (–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ + –ø—Ä–æ–ø–∏—Å–∫–∞)\n"
            "‚Ä¢ –°–ù–ò–õ–° (—Å—Ç—Ä–∞—Ö–æ–≤–æ–µ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ)\n"
            "‚Ä¢ –ò–ù–ù (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ª–æ–≥–æ–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞)\n"
            "‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –≤—ã–ø–∏—Å–∫–∞ –∏–∑ —Ç—Ä—É–¥–æ–≤–æ–π –∫–Ω–∏–∂–∫–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)\n"
            "‚Ä¢ –†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã –¥–ª—è –ó–ü (–ø–æ–ª–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–∑ –õ–ö –±–∞–Ω–∫–∞, –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã)\n\n"
            "üìå –ü–æ—Ä—è–¥–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:\n"
            "1. –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
            "2. –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–§–∞–º–∏–ª–∏—è_–ò–º—è_–û—Ç—á–µ—Å—Ç–≤–æ'\n"
            "3. –ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É\n"
            "4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ä—Ö–∏–≤ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"
        )
        await message.answer(response)


@dp.message(lambda message: message.text == "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
@access_check
async def select_handbook(message: types.Message, state: FSMContext, **kwargs):
    await state.set_state(Form.in_section)
    await state.update_data(current_section="–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
    await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=get_handbook_menu())



@dp.message(Form.in_section)
@access_check
async def process_section(message: types.Message, state: FSMContext, **kwargs):
    data = await state.get_data()
    current_section = data.get("current_section")

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é":
        await state.clear()
        username = f"@{message.from_user.username}" if message.from_user.username else str(message.from_user.id)
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(username))
        return

    # –ù–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª: –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫
    if current_section == "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫":
        if message.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã –ü–ú":
            text = (
                "–ü–∞—Ä–∫-–º–µ–Ω–µ–¥–∂–µ—Ä—ã:\n\n"
                "–ö–æ—à–∫–∏–Ω–æ\n"
                "–°–î–ï–ö: –û–±–ª–∞—Å—Ç–Ω–∞—è —É–ª., 1\n"
                "–ê—Å—Ç—Ä–∞—Ç–æ–≤ –†–æ–º–∞–Ω –Æ—Ä—å–µ–≤–∏—á\n"
                "+79218621492\n"
                "[@astratov_roman](https://t.me/astratov_roman)\n\n"
                "–¢—é–º–µ–Ω—å\n"
                "–°–î–ï–ö: –ê–Ω–¥—Ä–µ—è –ö–æ—Ä–µ–Ω–µ–≤—Å–∫–æ–≥–æ 11\n"
                "–û—Ö—Ä—è–º–∫–∏–Ω–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏—è –í–∞–¥–∏–º–æ–≤–Ω–∞ \n"
                "89504873768\n"
                "[@vaditmn](https://t.me/vaditmn)\n\n"
                "–ù–∏–∂–Ω–∏–π\n"
                "–°–î–ï–ö: –ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª., –≥.–ë–æ—Ä, —É–ª. –ú–∞—è–∫–æ–≤—Å–∫–æ–≥–æ, 1–ê\n"
                "–ê—Ä—Å–∏–µ–≤ –≠—Ä–Ω–µ—Å—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á\n"
                "+79867277470\n"
                "[@milkenxxx](https://t.me/milkenxxx)\n\n"
                "–£–∫—Ç—É—Å\n"
                "–°–î–ï–ö: –©–µ—Ä–±–∞–∫–æ–≤–∞ 35\n"
                "–ú–∏—Ö–∞–π–ª–æ–≤–∞ –≠–≤–µ–ª–∏–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞\n"
                "+79920208237\n"
                "[@loreley1264](https://t.me/loreley1264)\n\n"
                "–î—É–±—Ä–∞–≤–∞\n"
                "–°–î–ï–ö: –©–µ—Ä–±–∞–∫–æ–≤–∞ 35\n"
                "–ë—É—Ä–ª–∞–∫–æ–≤–∞ –û–ª—å–≥–∞ –ì—Ä–∏–≥–æ—Ä—å–µ–≤–Ω–∞ \n"
                "+79193727914\n"
                "[@olikburlakova](https://t.me/olikburlakova)"
            )
            await message.answer(text, parse_mode="Markdown", reply_markup=get_handbook_menu())
            return

        if message.text == "–ò–ù–ù":
            text = (
                "–ò–ù–ù:\n\n"
                "–ó–µ–ª–µ–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫: 7839504361\n"
                "–ü–ö7 –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥: 7839102736\n"
                "–ü–ö7 –ù–∏–∂–Ω–∏–π: 5246056919\n"
                "–ü–ö7 –¢—é–º–µ–Ω—å: 7838115620\n"
                "–î—É–±—Ä–∞–≤–∞-–ø–∞—Ä–∫: 6670343533"
            )
            await message.answer(text, reply_markup=get_handbook_menu())
            return

        if message.text == "–ë–ª–∞–Ω–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞":
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö PDF –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π, –ª–∏–±–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            files = [
                "–ë–ª–∞–Ω–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ö–æ—à–∫–∏–Ω–æ.pdf",
                "–ë–ª–∞–Ω–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥.pdf",
                "–ë–ª–∞–Ω–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ù–ù.pdf",
                "–ë–ª–∞–Ω–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¢—é–º–µ–Ω—å.pdf",
                "–ë–ª–∞–Ω–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –î—É–±—Ä–∞–≤–∞.pdf",
            ]
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –æ–¥–Ω–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É:
            for fpath in files:
                try:
                    with open(fpath, "rb") as f:
                        await message.answer_document(
                            BufferedInputFile(f.read(), filename=fpath)
                        )
                        await asyncio.sleep(0.2)
                except FileNotFoundError:
                    await message.answer(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {fpath}")
            await message.answer("–ë–ª–∞–Ω–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∫–∞.", reply_markup=get_handbook_menu())
            return

        if message.text == "–ö–∞—Ä—Ç–æ—á–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π":
            files = [
                "–ö–∞—Ä—Ç–æ—á–∫–∞ –û–û–û –ó–µ–ª–µ–Ω—ã–π –¢—Ä–µ—É–≥–æ–ª–Ω–∏–∫.pdf",
                "–ö–∞—Ä—Ç–æ—á–∫–∞ –û–û–û –ü–ö7 –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥.pdf",
                "–ö–∞—Ä—Ç–æ—á–∫–∞ –û–û–û –ü–ö7 –ù–∏–∂–Ω–∏–π.pdf",
                "–ö–∞—Ä—Ç–æ—á–∫–∞ –û–û–û –ü–ö7 –¢—é–º–µ–Ω—å.pdf",
                "–ö–∞—Ä—Ç–æ—á–∫–∞ –û–û–û –î—É–±—Ä–∞–≤–∞-–ü–∞—Ä–∫.pdf",
            ]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for fpath in files:
                try:
                    with open(fpath, "rb") as f:
                        await message.answer_document(
                            BufferedInputFile(f.read(), filename=fpath)
                        )
                    await asyncio.sleep(0.2)
                except FileNotFoundError:
                    await message.answer(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {fpath}")

            await message.answer("–ö–∞—Ä—Ç–æ—á–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∫–∞.", reply_markup=get_handbook_menu())
            return

        await message.answer("üìö –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", reply_markup=get_handbook_menu())
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º":
        await state.set_state(Form.in_instructions)
        await message.answer("üìã –í—ã–±–µ—Ä–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:", reply_markup=get_instructions_menu())
        return

    if current_section == "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π - –í–´–ù–ï–°–ï–ù–û –ò–ó TRY –ë–õ–û–ö–ê
        if data.get("subsection") == "order_videos":
            if message.text == "–ù–∞–∑–∞–¥ –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏":
                await state.update_data(subsection=None)
                await message.answer("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è:", reply_markup=get_inventory_menu())
                return

            # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∫–Ω–æ–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
            video_files_map = {
                "–õ–µ—Ä—É–∞": "–õ–µ—Ä—É–∞ –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.mp4",
                "–ö–æ–º—É—Å": "–ö–æ–º—É—Å –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.mp4",
                "–í—Å–µ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": "–í—Å–µ–∏–Ω—Å—Ç—É—Ä–º–µ–Ω—Ç—ã –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.mp4"
                # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ–ø–µ—á–∞—Ç–∫—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
            }

            button_text = message.text.strip()

            if button_text not in video_files_map:
                await message.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫: {button_text}")
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", reply_markup=get_order_video_menu())
                return

            video_filename = video_files_map[button_text]
            video_path = VIDEO_DIR / video_filename

            if not video_path.exists():
                logger.error(f"–í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
                await message.answer(f"‚ùå –í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_filename}")
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", reply_markup=get_order_video_menu())
                return

            try:
                await send_compressed_video(
                    message,
                    input_name=video_filename,
                    caption=f"–í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ {button_text}"
                )
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", reply_markup=get_order_video_menu())
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ {video_filename}: {e}")
                await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –¥–ª—è {button_text}")
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", reply_markup=get_order_video_menu())

            return

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ - –í TRY –ë–õ–û–ö–ï
        try:
            if message.text == "–ê–ª–≥–æ—Ä–∏—Ç–º":
                with open("–∏–Ω–≤–µ–Ω—Ç –∞–ª–≥–æ—Ä–∏—Ç–º.jpg", "rb") as photo:
                    await message.answer_photo(BufferedInputFile(photo.read(), filename="inventory_algorithm.jpg"))
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_inventory_menu())

            elif message.text == "–ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç—å?":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 3 —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
                files = [
                    "–∏–Ω–≤–µ–Ω—Ç –∫–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç—å 1.jpg",
                    "–∏–Ω–≤–µ–Ω—Ç –∫–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç—å 2.jpg",
                    "–∏–Ω–≤–µ–Ω—Ç –∫–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç—å 3.jpg"
                ]
                for file in files:
                    with open(file, "rb") as photo:
                        await message.answer_photo(BufferedInputFile(photo.read(), filename=file))
                    await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_inventory_menu())

            elif message.text == "–ó–∞–∫—Ä—ã–≤–∞—à–∫–∏":
                with open("–∏–Ω–≤–µ–Ω—Ç –∑–∞–∫—Ä—ã–≤–∞—à–∫–∏.jpg", "rb") as photo:
                    await message.answer_photo(BufferedInputFile(photo.read(), filename="inventory_closing.jpg"))
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_inventory_menu())

            elif message.text == "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
                faq_text = (
                    "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏:\n\n"
                    "üîπ –í —Ç–∞–±–ª–∏—Ü–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–µ–Ω\n"
                    "‚Ä¢ –ï—Å–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ > 5000—Ä. - —Å–æ–≥–ª–∞—Å—É–π —Å –æ–ø–µ—Ä.–¥–∏—Ä-–æ–º\n"
                    "‚Ä¢ –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –¥–µ—à–µ–≤–ª–µ, –Ω–æ –ø–∞—Ä–∫ –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ - –¥–æ–±–∞–≤–ª—è–π –≤ –∑–∞–∫–∞–∑ –∏ —Å–æ–≥–ª–∞—Å—É–π\n\n"
                    "üîπ –£ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∑–∞ –Ω–∞–ª–∏—á–∫—É?\n"
                    "‚Ä¢ –î–∞, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Ä–æ–≥–æ–π (–º—É—Å–æ—Ä–Ω—ã–µ –ø–∞–∫–µ—Ç—ã, —Ç—É–∞–ª–µ—Ç–Ω–∞—è –±—É–º–∞–≥–∞ –∏ —Ç.–¥.)\n"
                    "‚Ä¢ –ï—Å–ª–∏ > 5000—Ä. - –æ—Ñ–æ—Ä–º–ª—è–π –ø–æ –±–µ–∑–Ω–∞–ª—É –∏–ª–∏ —Å–æ–≥–ª–∞—Å—É–π —Å –æ–ø–µ—Ä.–¥–∏—Ä–æ–º\n\n"
                    "üîπ –ú–ù–ï –°–†–û–ß–ù–û\n"
                    "‚Ä¢ –ï—Å–ª–∏ —Å—á—ë—Ç —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–µ –≤ –¥–µ–Ω—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏:\n"
                    " –û—Ñ–æ—Ä–º–ª—è–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π –≤ –±–µ—Å–µ–¥—É —Å–æ —Å–ª–æ–≤–æ–º '–°–†–û–ß–ù–û'\n\n"
                    "üîπ OZON\n"
                    "‚Ä¢ –ó–∞–∫–∞–∑—ã —Å Ozon –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã (–ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ —É –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏)\n"
                    "‚Ä¢ –î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ä–µ–¥–∫–∏–µ –∑–∞–∫–∞–∑—ã, –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∑–∞–∫–∞–∑—ã–≤–∞–µ–º —É –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤\n\n"
                    "üîπ –ù–∞–º –¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≥–∞–π–∫–æ–≤–µ—Ä—Ç, –Ω–æ –æ–Ω –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?\n"
                    "‚Ä¢ –ï—Å–ª–∏ –∑–∞–∫–∞–∑–∞–ª–∏ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–≤–∞—Ä –ø–æ –±–µ–∑–Ω–∞–ª—É:\n"
                    " 1. –°–æ–æ–±—â–∏ –æ—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä—É\n"
                    " 2. –û—Ñ–æ—Ä–º–∏ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç\n"
                    " 3. –í–µ—Ä–Ω–∏ —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω —Å –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é"
                )
                await message.answer(faq_text)
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_inventory_menu())

            elif message.text == "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ (–≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏)":
                await state.update_data(subsection="order_videos")
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", reply_markup=get_order_video_menu())

        except FileNotFoundError as e:
            await message.answer(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            logger.error(f"File not found: {e}")



    if current_section == "–ù–∞–ª–∏—á–Ω—ã–µ":
        try:
            if message.text == "–ê–ª–≥–æ—Ä–∏—Ç–º":
                with open("–∞–ª–≥–æ—Ä–∏—Ç–º –ù–∞–ª–∏—á–∫–∞.jpg", "rb") as photo:
                    await message.answer_photo(BufferedInputFile(photo.read(), filename="cash_algorithm.jpg"))
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_cash_menu())

            elif message.text == "–ö–∞–∫ —Ç—Ä–∞—Ç–∏–º":
                with open("–∫–∞–∫ —Ç—Ä–∞—Ç–∏–º –ù–∞–ª–∏—á–∫–∞.jpg", "rb") as photo:
                    await message.answer_photo(BufferedInputFile(photo.read(), filename="cash_spending.jpg"))
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_cash_menu())

            elif message.text == "–†–µ–∑—É–ª—å—Ç–∞—Ç":
                with open("—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ù–∞–ª–∏—á–∫–∞.jpg", "rb") as photo:
                    await message.answer_photo(BufferedInputFile(photo.read(), filename="cash_result.jpg"))
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_cash_menu())

            elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º":
                await state.set_state(Form.waiting_for_instructor)
                await message.answer("üìã –í—ã–±–µ—Ä–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:", reply_markup=get_instructions_menu())

            elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é":
                await state.clear()
                await cmd_start(message, state)

        except FileNotFoundError as e:
            await message.answer(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            logger.error(f"File not found: {e}")

    if current_section == "–ì—Ä–∞—Ñ–∏–∫ –∏ –∑–ø —Ç–∞–±–µ–ª—å":
        try:
            if message.text == "–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                files = [
                    "1 –∏–Ω—Å—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–ó–ü.jpg",
                    "2 –∏–Ω—Å—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–ó–ü.jpg",
                    "3 –∏–Ω—Å—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–ó–ü.jpg"
                ]

                for file in files:
                    with open(file, "rb") as photo:
                        await message.answer_photo(BufferedInputFile(photo.read(), filename=file))
                    await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_schedule_menu())

            elif message.text == "–ö–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                files = [
                    "—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ó–ü —Ç–∞–±–µ–ª—å.jpg",
                    "—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä–∞—Ñ–∏–∫.jpg"
                ]

                for file in files:
                    with open(file, "rb") as photo:
                        await message.answer_photo(BufferedInputFile(photo.read(), filename=file))
                    await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_schedule_menu())

            elif message.text == "–ê–ª–≥–æ—Ä–∏—Ç–º":
                with open("–∞–ª–≥–æ—Ä–∏—Ç–º –≥—Ä–∞—Ñ–∏–∫–ó–ü.jpg", "rb") as photo:
                    await message.answer_photo(BufferedInputFile(photo.read(), filename="algorithm.jpg"))
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_schedule_menu())



            elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é":
                await state.clear()
                await cmd_start(message, state)

        except FileNotFoundError as e:
            await message.answer(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ({e})")
            logger.error(f"File not found: {e}")

    elif current_section == "–ò–Ω—Å–ø–µ–∫—Ü–∏—è –ò–°–°":
        try:
            if message.text == "–ê–ª–≥–æ—Ä–∏—Ç–º":
                with open("–∞–ª–≥–æ—Ä–∏—Ç–º –ò–°–°.jpg", "rb") as photo:
                    await message.answer_photo(BufferedInputFile(photo.read(), filename="inspection_algorithm.jpg"))
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_inspection_menu())

            elif message.text == "–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å–æ —Å–ø–∏—Å–∞–Ω–Ω—ã–º —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ–º":

                await message.answer("–î–ª—è —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞–µ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è. \n\n"
                                     
                                     "–í –∫–æ–Ω—Ü–µ —Å–µ–∑–æ–Ω–∞ —Å–æ–æ–±—â–∏—Ç—å –æ–ø–µ—Ä. –¥–∏—Ä–µ–∫—Ç–æ—Ä—É.")
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_inspection_menu())

            elif message.text == "–ö–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç":
                with open("—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ò–°–°.jpg", "rb") as photo:
                    await message.answer_photo(BufferedInputFile(photo.read(), filename="inspection_result.jpg"))
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_inspection_menu())

            elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é":
                await state.clear()
                await cmd_start(message, state)

        except FileNotFoundError as e:
            await message.answer(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ({e})")
            logger.error(f"File not found: {e}")

    elif "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é" in message.text:
        await state.clear()
        await cmd_start(message, state)



@dp.message()
@access_check
async def handle_other(message: types.Message, **kwargs):
    username = f"@{message.from_user.username}" if message.from_user.username else str(message.from_user.id)
    await message.answer("‚Ñπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", reply_markup=get_main_menu(username))



# –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await bot.delete_webhook(drop_pending_updates=True)
    await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    reminder_task = asyncio.create_task(check_reminders())
    clean_task = asyncio.create_task(clean_old_events_task())

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        await asyncio.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
        await dp.start_polling(bot, skip_updates=True, allowed_updates=[])
    except asyncio.CancelledError:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏, –∞ –Ω–µ –≤—Å–µ
        reminder_task.cancel()
        clean_task.cancel()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏—Ö –∑–∞–¥–∞—á
        try:
            await asyncio.wait_for(asyncio.gather(reminder_task, clean_task, return_exceptions=True), timeout=3.0)
        except asyncio.TimeoutError:
            logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await bot.session.close()
        logger.info("–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == '__main__':
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π KeyboardInterrupt
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")